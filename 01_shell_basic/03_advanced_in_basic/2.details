字符串，特殊字符
字符串就是一串字符，一般的说法是，多于一个的字符连在一起叫做字符串，单个字符就叫字符
不过本质上，单个字符也是字符串，此外还有空字符串。
a, b, c, 1, 2, 3, @, #, $            <-- 字符
a, b, c, 1, 2, 3, @, #, $            <-- 长度为1 的字符串
"", ''                               <-- 长度为0 的字符串
abc, hello world, good morning       <-- 字符串
Total: $1234                         <-- 字符串

对于shell来说，有些字符除了它本身的意义之外，还有特殊的意义，如果要在shell 里面表达特殊字符本身，就必须通过引用(quoting)的方法来去除特殊字符的特殊意义。以下列出的是shell 里部分特殊字符：

    空格            <-- 命令行分隔符
    制表符          <-- 命令行分隔符
    换行符          <-- 命令的结束
    "               <-- 双引号，属于引用符号
    '               <-- 单引号，属于引用符号
    \               <-- 反斜杠，属于引用符号
    $               <-- dollar 符，可用于参数展开
    `               <-- 反引号，可用于执行命令
    ;               <-- 可用于分隔不同的命令


引用符号有三种：
双引号：可以去除大多数特殊字符的特殊意义
单引号：可以去除所有特殊字符的特殊意义，除了单引号
反斜杠：不被引用的反斜杠可以去除紧接其后的单个字符的特殊意义，除了<newline>


空格属于特殊字符，它是shell 的分隔符，如果要表达一个包含了空格的字符串，就要用引用符号来去除其特殊含义
"hello world"       <-- 用双引号来去除空格的特殊意义
'hello world'       <-- 用单引号来去除空格的特殊意义
hello\ world        <-- 用反斜杠来去除空格的特殊意义

$ 也属于特殊字符，如果要表达一个包含了 $ 的字符串，也需要用到引用符号，但和去除空格符号的特殊含义不一样。
"Total: $1234"      <-- **** 错误 ****
'Total: $1234'      <-- 正确
Total:\ \$1234      <-- 正确

这其实就是双引号的特性造成的，双引号中，以下几种符号有特殊的处理方式：
    $       <-- dollar 符，在绝大多数情况保留其特殊的意义
    `       <-- 反引号，保留其特殊的意义
    !       <-- 感叹号，当开了历史展开功能时，保留其特殊意义 (set +H)
    \       <-- 反斜杠，仅当其后是$, `, \, ", !, <newline> 时保留其特殊意义


举例：
1. 字符串中包含dollar 符 $
    'xxx $ xxx'         <-- 用单引号来引用
2. 字符串中包含双引号
    'xxx " yyy'         <-- 用单引号来引用
    "xxx \" yyy"        <-- 用双引号加反斜杠来引用
3. 字符串中包含单引号
    "xxx ' yyy"         <-- 用双引号来引用
4. 需要在字符串中包含变量的内容
    "xxx $v yyy"        <-- 可以使用双引号，但是不能使用单引号


关于引用的更进一步的说明，请参考bash 的man文档中 QUOTING 部分 (man 命令的显示结果是使用less命令来显示的，所以可以使用less的搜索功能定位QUOTING 字符串）





命令的执行

思考：
以下命令的输出中为什么没有双引号？
[czl@mob ~]$ echo "hello world."
hello world.


shell 执行下面的 hello.sh 命令的基本流程：
[czl@mob ~]$ people=zhangsan ./hello.sh > /tmp/hello

1. 取出变量赋值和重定向部分
    people=zhangsan
    ./hello.sh
    > /tmp/hello

2. 展开别名 (alias bieming='ls /home')
3. 执行各种展开操作 (brace, tilde, parameter and variable, arithmetic,
                command substitution, word splitting, pathname expansion)
4. 设置变量，设置重定向
5. 看剩下的命令名部分是否包含斜杠
    5.1. 有斜杠
        就把该字符串当成命令的路径名
    5.2. 没斜杠（确定命令的路径）
        5.2.1 是否shell 的函数 func() { ls /home; }
        5.2.2 是否shell 的内部命令
        5.2.3 外部命令
6. 执行
   -- 如果是路径，就直接执行路径所指的程序
   -- 如果是shell 函数和shell 内部命令，就直接执行
   -- 如果是外部命令，就到PATH 中查找相应的程序，并执行。


对于以上过程，最基本的一个就是记住以下优先级
别名 > 函数 > 内部命令 > 外部命令







輸入輸出，重定向，管道

Linux 程序有三个标准的输入输出，分别是：
标准输入，用数字0表示，默认连接到键盘，程序通常用来获取用户的输入
标准输出，用数字1表示，默认连接到屏幕，程序通常用来输出信息
标准错误，用数字2表示，默认连接到屏幕，程序通常用来输出错误信息

命令 passwd 从标准输入读取用户密码，所以用户可以用键盘输入密码
[czl@mob ~]$ passwd
Changing password for user czl.
Changing password for czl.
(current) UNIX password:

命令 echo 把结果输出到标准输出，所以可以在屏幕上看到结果
[czl@mob ~]$ echo hello world
hello world
[czl@mob ~]$

普通用户没有权限查看/root 目录，所以出错，于是ls 把错误信息输出到标准错误，也就是屏幕
[czl@mob ~]$ ls /root
ls: cannot open directory /root: Permission denied
[czl@mob ~]$


用户可以根据需要，把默认的输入输出的方向进行修改，这叫做重定向。

--- 对标准输出和标准错误的重定向

# 把ls命令的标准输出重定向到文件/tmp/stdout.txt中
# 并把标准错误重定向到文件/tmp/stderr.txt中
# 下面这两条命令是等价的，也就是说1可以省略
# 注意1，2的后面不能有空格
ls / /root 1> /tmp/stdout.txt 2> /tmp/stderr.txt
ls / /root > /tmp/stdout.txt 2> /tmp/stderr.txt

这两条命令与上面两条命令的区别是：如果目标文件已经存在，> 会把原文件的内容删掉，>> 不会这样做，它会把数据添加到原文件的后面
ls / /root 1>> /tmp/stdout.txt 2>> /tmp/stderr.txt
ls / /root >> /tmp/stdout.txt 2>> /tmp/stderr.txt

可以把标准输出和标准错误合并在一起
ls / /root > /tmp/out.txt 2>&1  <-- 把标准输出和标准错误合并，输入到文件/tmp/out.txt，/tmp/out.txt 里原有的内容将会被删除
ls / /root &> /tmp/out.txt      <-- 与上一条命令等价，语法更简洁，推荐使用
ls / /root &>> /tmp/out.txt     <-- 与上一条命令的区别是，不会删除文件/tmp/out.txt 中原有的内容

特殊文件/dev/null
echo hello world > /dev/null    <-- 重定向到该文件的数据都被内核丢掉了，可以用这个特性来屏蔽某些输出信息
ls / /root 2>/dev/null          <-- 屏蔽掉命令的出错信息







把标准错误合并到标准输出：
ls /home /root 1> /tmp/good 2>&1     <-- good
默认值           1  --- 屏幕
1> /tmp/good     1  --- /tmp/good
2>&1             2  --- /tmp/good

ls /home /root 2>&1 1> /tmp/good     <-- bad
默认值           1  --- 屏幕
2>&1             2  --- 屏幕
1> /tmp/good     1  --- /tmp/good


可以使用下面的命令来验证以上的分析：
1. 在第一个终端运行命令
   sleep 999 1> /tmp/good 2>&1
2. 在第二个终端，找出sleep 的进程ID，假设ID 为1234
   pgrep -x sleep
3. 查看该进程所打开的文件
   lsof -a -nP -p1234 -d0,1,2
4. 终止第一步的sleep 进程，然后再次运行命令，使用不同的重定向方法
   sleep 999 2>&1 1> /tmp/good
5. 在第二个终端，找出sleep 的进程ID，假设ID 为1234
   pgrep -x sleep
6. 查看该进程所打开的文件，注意与之前的结果的不同之处
   lsof -a -nP -p1234 -d0,1,2




--- 对标准输入的重定向

# cat命令的标准输入来源于文件 /etc/passwd 中
# 下面这两条命令是等价的，也就是说0可以省略
# 注意0后面不能有空格
cat 0< /etc/passwd
cat < /etc/passwd


上面所描述的重定向，是把标准的输入输出连接到文件，我们也可以把多个程序之间的标准输入输出进行连接，实现命令之间数据的传递，这种技术被形象地称做管道，程序的输出就像流水在管道中流通一样，从最左边的程序流到最右边的程序。管道是linux shell 里非常常见的技术，利用管道技术可以达到简单工具完成复杂功能的目的。

左边的cat 命令的标准输出连接到右边的 head 命令的标准输入，也就是说，左边的命令的标准输出作为右边的命令的标准输入。
[czl@mob ~]$ cat /etc/passwd | head -n 3
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
[czl@mob ~]$

cat 命令的标准输出作为 head 命令的标准输入，head 命令的标准输出作为 tail 命令的标准输入
[czl@mob ~]$ cat /etc/passwd | head -n 3 | tail -n 1
daemon:x:2:2:daemon:/sbin:/sbin/nologin
[czl@mob ~]$



关于标准输入输出的深入探讨

标准输入输出是Shell 默认为程序打开的三个文件描述符，虽然大多数的程序都会使用这三个文件描述符来作为自己的输入输出，但这只是约定，并不具有强制性，也就是说，程序可以不使用这三个标准的文件描述符，而是自己打开新的文件描述符来使用。当程序不使用标准的输入输出时，这里所使用的重定向方法对它也就不起作用了。

举例：
passwd 程序从标准输入读取用户密码，因此我们可以通过重定向标准输入来向它提供密码
ssh 命令是用于远程登录的程序，它读取用户输入的密码时，使用的不是标准输入，因此我们无法通过重定向标准输入来向它提供密码





命令历史
set -o history      <-- 启用命令历史功能
set +o history      <-- 关闭命令历史功能
history             <-- 显示命令的历史

Bash shell 的命令历史默认记录在文件 ~/.bash_history 中

以下三个变量用于控制命令历史的数量，以及是否记录时间戳
HISTSIZE=1000000                                #<-- 最多存储多少条记录
HISTFILESIZE=2000000                            #<-- 命令历史文件的最大尺寸
HISTTIMEFORMAT='[%Y-%m-%d %H:%M:%S] '           #<-- 命令历史的时间戳格式

如果需要使以上的命令历史设置永久生效，就可以在文件~/.bashrc 的尾部加上上面的四行。

命令历史更进一步的用法，在vi编辑器的部分有介绍。





环境变量
环境变量可以被子进程访问。

查看当前的环境变量
[czl@lab ~]$ env
ORBIT_SOCKETDIR=/tmp/orbit-czl
HOSTNAME=lab.net
IMSETTINGS_INTEGRATE_DESKTOP=yes
TERM=xterm
SHELL=/bin/bash
 ...

set命令可以列出更多信息
[czl@lab ~]$ set


定义（设置）一个环境变量，用的是命令export，有两种做法

1. 先定义，后export
TMOUT=300
HISTSIZE=100000
export TMOUT HISTSIZE

2. 一步到位export
export TMOUT=300 HISTSIZE=100000



几个SHELL 变量介绍
1. PATH                                     <-- 影响命令的搜索
2. TMOUT                                    <-- 超时时间
3. PS1                                      <-- 命令提示符
4. HISTSIZE, HISTFILESIZE, HISTTIMEFORMAT   <-- 命令历史




配置文件

Bash shell 常用的配置文件有以下几个：
/etc/profile       <-- 全局配置文件，作用于系统上所有的用户
/etc/bashrc        <-- 全局配置文件，作用于系统上所有的用户
~/.bash_profile    <-- 用户配置文件
~/.bashrc          <-- 用户配置文件
~/.bash_logout     <-- 用户配置文件


根据shell 的启动方式不同，可以大致地把shell分为以下几种：
1. login shell              <-- 在文本界面登录，su -, bash --login
2. interactive shell        <-- gnome-terminal 中默认的shell
3. non-interactive shell    <-- 用来运行脚本的shell


在红帽企业版6.5 上面，/etc/profile, ~/.bash_profile, ~/.bashrc, /etc/bashrc 这四者的调用关系图如下：


           login shell               interactive shell
              /  \                           |
             /    \                          |
          1 /      \ 2                       |
           /        \                        |
          /          \                       v
 /etc/profile    ~/.bash_profile  --->  ~/.bashrc  ---> /etc/bashrc


login shell 开始运行时会按顺序读取文件 /etc/profile 和 ~/.bash_profile
interactive shell 开始运行时会读取文件 ~/.bashrc
~/.bash_profile 会调用~/.bashrc
~/.bashrc 会调用 /etc/bashrc

另外，login shell 退出时会读取文件 ~/.bash_logout

根据以上特点，可以通过修改上面几个配置文件，来修改shell的行为



如何启动一个login shell （登录shell）？
在bash 的man 文档中，在section INVOCATION 中有关于login shell 的定义，如下：
A login shell is one whose first character of argument zero is a -, or one started with the --login  option.






思考：
1. 如果需要设置一些命令别名，那么可以把别名写在哪个（或者哪些）配置文件中？
2. 如果需要在用户注销时清空历史记录，可以把清空历史记录的命令写入哪个配置文件中？
3. 如果需要某些设置不管是不是登录shell都生效，可以把设置写入哪个配置文件？
